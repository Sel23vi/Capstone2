import streamlit as st
import emoji
import mysql.connector
import openpyxl
import plotly.express as px
import plotly.graph_objects as go
import json
import geopandas as gpd
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
mydb = mysql.connector.connect(
            host='localhost',
            user='root',
            password='xxxxxx',
            database='capstone2'
        )
pointer = mydb.cursor(buffered=True)

st.markdown("""
    <style>
        /* Adjust padding in columns */
        .css-1d391kg {
            padding: 4000px;
        }

        /* Adjust the padding and background color of the block container */
        .block-container {
            padding: 5px;
            margin: 2px;  /* Add a semicolon here */
            background-color: #90FF65;
        }

        /* Adjust body styling */
        body {
            line-height: 1.3; 
        }

        /* Change the background color of the main container */
        .main {
            background-color: #90FF65; /* Specify any background color here */
        }
         
        /* Change the background color of the sidebar */
        [data-testid="stSidebar"] {
            background-color: #90FF65; /* Light blue color */
        }
            
        /* Set background color of the chart */
            div[data-testid="stPlotlyChart"] div.plotly-graph-div {
            background-color: transparent !important;
            }
    </style>
""", unsafe_allow_html=True)


top_bar = st.container()
with top_bar:
    my_sticker = emoji.emojize (':currency_exchange:')
    st.write(my_sticker)
    html_string = f"<div style='text-align: left;'><h1 style='font-family: aptos display; color:purple; font-size:30px;'>PhonePe - India {my_sticker}</h1></div>"
    st.markdown(html_string, unsafe_allow_html=True)
    st.markdown(':rainbow[**_- Data Visualization & Insights_**]', unsafe_allow_html=True)

st.write("\n")


st.sidebar.markdown(':green[India] :scroll:')
v_choice = st.sidebar.selectbox('Pick the data type you wish to visualize:',('---^---','Transactions', 'Users'))
yrs_list = "select distinct(year) as Year from agg_trans;"
lst = pd.read_sql(yrs_list,mydb)
if v_choice == 'Users':
     stat = st.sidebar.selectbox('select State:', ('Andaman & Nicobar Islands',	 'Andhra Pradesh',	 'Arunachal Pradesh',	 'Assam',	 'Bihar',	 'Chandigarh',	 'Chhattisgarh',	 'Dadra & Nagar Haveli & Daman & Diu',	 'Goa',	 'Gujarat',	 'Haryana',	 'Himachal Pradesh',	 'Jammu & Kashmir',	 'Jharkhand',	 'Karnataka',	 'Kerala', 'Ladakh', 'Lakshadweep',	 'Madhya Pradesh',	 'Maharashtra',	 'Manipur',	 'Meghalaya',	 'Mizoram',	 'Nagaland',	 'Delhi',	 'Odisha',	 'Puducherry',	 'Punjab',	 'Rajasthan',	 'Sikkim',	 'Tamil Nadu',	 'Telangana',	 'Tripura',	 'Uttar Pradesh',	 'Uttarakhand',	 'West Bengal'))
y_choice = st.sidebar.selectbox('of year:', lst)
q_choice = st.sidebar.selectbox('of quarter:', (1,2,3,4))
map_choice = st.sidebar.selectbox('Wish to see a geospatial projection? \n select type:',('No','Yes'))


if map_choice == 'Yes':
     if v_choice == '---^---':
          pass
     if v_choice == 'Transactions':
          df = pd.read_excel("C:/Users/my pc/Cleaned_MapTrans.xlsx", sheet_name = f"{y_choice}_Q{q_choice}")
          geojson_file_path = 'C:/Users/my pc/Desktop/Capstone/cap 2/gadm41_IND_2_New/gadm41_IND_2.geojson'

          with open(geojson_file_path, 'r') as f:
              geojson_data = json.load(f)

          fig = px.choropleth(
               df,
               geojson = geojson_data,
               featureidkey = 'properties.NAME_2',
               locations ='District_Name',
               color ='Total Transaction Value',
               color_continuous_scale ='spectral', 
               title = f'PhonePe Transactions Summary: {y_choice} - Q{q_choice}'
               )
          fig.update_traces(
               hovertemplate =(
               '%{customdata[0]} :' +
               ' %{customdata[1]}<br>' +
               'Total PhonePe Transactions: %{customdata[2]}<br>' +
               'Total Transaction Value: %{customdata[3]:,.2f}'
                ),
               customdata=df[['State', 'District_Name', 'Total PhonePe Transactions', 'Total Transaction Value']].values,
               marker=dict(opacity=1.0,  line=dict(width=1))
                )

          fig.update_geos(fitbounds='locations', visible=False)

          fig.show()

    
     if v_choice == 'Users':
        df = pd.read_excel("C:/Users/my pc/Cleaned_MapUsers.xlsx", sheet_name = f"{y_choice}_Q{q_choice}")
        geojson_file_path = 'C:/Users/my pc/Desktop/Capstone/cap 2/gadm41_IND_2_New/gadm41_IND_2.geojson'

        with open(geojson_file_path, 'r') as f:
             geojson_data = json.load(f)

        fig = px.choropleth(
             df,
             geojson = geojson_data,
             featureidkey = 'properties.NAME_2',
             locations ='District_Name',
             color ='Total Registered Users',
             color_continuous_scale ='armyrose',
             title = f'PhonePe Users Summary: {y_choice} - Q{q_choice}',
             )

        fig.update_geos(fitbounds='locations', visible=False)

        fig.update_traces(
             hovertemplate =(
                  '%{customdata[0]} :' +
                  ' %{customdata[1]}<br>' +
                  'Total Registered Users: %{customdata[2]}<br>' +
                  'App Opens: %{customdata[3]}'
                  ),
             customdata=df[['State', 'District_Name', 'Total Registered Users', 'AppOpens']].values,
             marker=dict(opacity=1.0,  line=dict(width=1))
             )

        fig.update_traces(
             marker=dict(opacity=0.3),  # decrease opacity when hovering
             selector= 'hoveron',
             marker_line_width=1,  # Width of the district borders
             marker_line_color='black'  # Color of the district borders
             )

        fig.update_coloraxes(
             colorbar=dict(
                  tickmode='auto',
                  tickvals=list(range(df['Total Registered Users'].min(), df['Total Registered Users'].max() + 100, 1000)),  # Specify the tick values
                  ticktext=[str(i) for i in range(df['Total Registered Users'].min(), df['Total Registered Users'].max() + 100, 1000)]  # Customize tick labels
                  )
                  )

        fig.show()

        
if v_choice:
        if v_choice == '---^---':
            pass
        if v_choice == 'Transactions':
            query = f"select sum(Transaction_Count) from agg_trans where Year = {y_choice} and Quarter = {q_choice};" 
            x = pd.read_sql(query,mydb)
            st.write(f'Total PhonePe Transactions: {x.iloc[0,0]:,.0f}')
            query_a = f"select ROUND(SUM(Transaction_Amount)) from agg_trans where Year = {y_choice} and Quarter = {q_choice};"
            a = pd.read_sql(query_a,mydb)
            st.write(f'Total Transactions Value(INR): {a.iloc[0,0]:,.2f}')
            query_b = f"select Round(avg(Transaction_Amount)) from agg_trans where Year = {y_choice} and Quarter = {q_choice};"
            b = pd.read_sql(query_b,mydb)
            st.write(f'Avg.Transaction Value(INR): {b.iloc[0,0]:,.2f}')
            query_ba = f"select sum(UserByDevice_Count) from agg_userf where Year = {y_choice} and Quarter = {q_choice};"
            b = pd.read_sql(query_ba,mydb)
            st.write(f'Number of Registered Users: {b.iloc[0,0]:,.0f}')

            st.divider()   
            st.write("\n") 

            st.write(':money_with_wings:Categories:-')
            query_c = f'select Transaction_type, avg(Transaction_Amount) from agg_trans where Year = {y_choice} and Quarter = {q_choice} group by Transaction_Type;'
            c = pd.read_sql(query_c,mydb)
            st.write(f'{c.iloc[0,0]}: {c.iloc[0,1]:,.0f}')
            st.write(f'{c.iloc[1,0]}: {c.iloc[1,1]:,.0f}')
            st.write(f'{c.iloc[2,0]}: {c.iloc[2,1]:,.0f}')
            st.write(f'{c.iloc[3,0]}: {c.iloc[3,1]:,.0f}')
            st.write(f'{c.iloc[4,0]}: {c.iloc[4,1]:,.0f}')

            st.divider()   
            st.write("\n") 

            st.markdown(f"TOP TRANSACTIONS BY STATE IN YEAR: {y_choice}")
            query_sb = f"SELECT State, Year, Quarter, District_Name, Districtwise_TransactionAmount FROM top_trans_dist where Year = {y_choice};"
            dfm1 = pd.read_sql(query_sb, mydb)
            fig = px.sunburst(data_frame=dfm1,path=['Year','Quarter','State','District_Name','Districtwise_TransactionAmount'],maxdepth=3,width=800,height=600,color_discrete_sequence=px.colors.qualitative.Dark24 ) 
            fig.show()


            query_m = f"select Year, Transaction_Type, sum(Transaction_Count) as Total_Transactions, sum(Transaction_Amount) as Total_Transaction_Value from agg_trans where year = 2018 group by Transaction_Type;"
            m = pd.read_sql(query_m,mydb)
            query_n = f"select Year, Transaction_Type, sum(Transaction_Count) as Total_Transactions, sum(Transaction_Amount) as Total_Transaction_Value from agg_trans where year = 2019 group by Transaction_Type;"
            n = pd.read_sql(query_n,mydb)
            query_o = f"select Year, Transaction_Type, sum(Transaction_Count) as Total_Transactions, sum(Transaction_Amount) as Total_Transaction_Value from agg_trans where year = 2020 group by Transaction_Type;"
            o = pd.read_sql(query_o,mydb)
            query_p = f"select Year, Transaction_Type, sum(Transaction_Count) as Total_Transactions, sum(Transaction_Amount) as Total_Transaction_Value from agg_trans where year = 2021 group by Transaction_Type;"
            p = pd.read_sql(query_p,mydb)
            query_q = f"select Year, Transaction_Type, sum(Transaction_Count) as Total_Transactions, sum(Transaction_Amount) as Total_Transaction_Value from agg_trans where year = 2022 group by Transaction_Type;"
            q = pd.read_sql(query_q,mydb)
            query_r = f"select Year, Transaction_Type, sum(Transaction_Count) as Total_Transactions, sum(Transaction_Amount) as Total_Transaction_Value from agg_trans where year = 2023 group by Transaction_Type;"
            r = pd.read_sql(query_r,mydb)
            df2 = pd.concat([m, n, o, p, r, q], axis=0)
            pivot = df2.pivot_table(index = "Transaction_Type", columns= "Year", values= 'Total_Transactions')
            st.write(pivot)
            ax = sns.lineplot(data= pivot)
            ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='center', fontsize=7)
            ax.set_yticklabels(ax.get_yticklabels(), fontsize=7)
            ax.set_xlabel('Transaction Type', fontsize=7, fontstyle='italic')  # X-axis label
            ax.set_ylabel('Total Transactions(Billion)', fontsize=7, fontstyle='italic')  # Y-axis label
            ax.set_title('Transaction Type Vs Total Transactions', fontsize=10, fontstyle='italic', fontweight='bold')
            legend_properties = {'weight': 'bold', 'size': 7, 'family': 'Calibri'}
            ax.legend(title='Year', prop=legend_properties)
            st.pyplot(plt.gcf())  # Show the figure
            plt.clf()  # Clear the figure

            # Add some space between the plots
            st.write("\n")

            with st.expander("Observations & Insights"):
                 st.write("""It seems that, PhonePe is being used mostly for 'Merchant payment' type of transactions. 
                      \n A steep and continous increase in the number of 'Merchant payment' transactions is observed over the years.
                      \n a similar trend is followed by 'Peer-to-peer transaction counts' and 'Bill & rechage type transaction', but in a smaller scales.
                      \n The 'financial services'  category had the lowest number of transactions.
                      \n The total transaction value varies significantly across different types.
                      \n To further analyze this data to identify trends, growth, or changes in transaction behavior over the years,
                      we might want to investigate why certain transaction types increased or decreased. Without additional context, 
                      it’s challenging to draw definitive conclusions.  """)


            st.divider()

        st.write("\n")

        if v_choice == 'Users':

            st.markdown(f"TOP USERS BY STATE IN YEAR: {y_choice}")
            query_pc = f"SELECT State, Year, Quarter, District_Name, Registred_Users_count FROM top_user_dist where Year = {y_choice};"
            dfm = pd.read_sql(query_pc, mydb)
            fig = px.sunburst(data_frame=dfm,path=['Year','Quarter','State','District_Name','Registred_Users_count'],maxdepth=3,width=800,height=600,color_discrete_sequence=px.colors.qualitative.Light24 ) 
            fig.show()
            
            if stat:
                query = f"select State, District_Name, Registred_Users_count from top_user_dist where Year = {y_choice} and Quarter = {q_choice};" 
                xx = pd.read_sql(query,mydb)
                print(xx['State'].unique)
                dfk = xx[(xx['State'] == stat)]
                ax = sns.barplot(x = dfk['District_Name'], y = dfk['Registred_Users_count'])
                ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='center', fontsize=7)
                ax.set_yticklabels(ax.get_yticklabels(), fontsize=7)
                ax.set_xlabel('State', fontsize=7, fontstyle='italic')  # X-axis label
                ax.set_ylabel('District', fontsize=7, fontstyle='italic')  # Y-axis label
                ax.set_title('Top User Districts', fontsize=10, fontstyle='italic', fontweight='bold')
                legend_properties = {'weight': 'bold', 'size': 7, 'family': 'Calibri'}
                ax.legend(title='Top User Districts', prop=legend_properties)
                plt.gca().set_facecolor('none')
                st.pyplot(plt.gcf())  # Show the figure
                plt.clf()  # Clear the figure
        
            # Add some space between the plots
            st.write("\n")

            st.divider()

            query_d = f"select State, Year, sum(UserByDevice_Count) as UsersCount from Agg_userf where Year = 2018 GROUP BY State;"
            d = pd.read_sql(query_d,mydb)
            query_e = f"select State, Year, sum(UserByDevice_Count) as UsersCount from Agg_userf where Year = 2019 GROUP BY State;"
            e = pd.read_sql(query_e,mydb)
            query_f = f"select State, Year, sum(UserByDevice_Count) as UsersCount from Agg_userf where Year = 2020 GROUP BY State;"
            f = pd.read_sql(query_f,mydb)
            query_g = f"select State, Year, sum(UserByDevice_Count) as UsersCount from Agg_userf where Year = 2021 GROUP BY State;"
            g = pd.read_sql(query_g,mydb)
            query_h = f"select State, Year, sum(UserByDevice_Count) as UsersCount from Agg_userf where Year = 2022 GROUP BY State;"
            h = pd.read_sql(query_h,mydb)
            df = pd.concat([d,e,f,g,h], axis=0)
            ax = sns.barplot(x = df['State'], y = df['UsersCount'], hue = df['Year'])
            ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='center', fontsize=7)
            ax.set_yticklabels(ax.get_yticklabels(), fontsize=7)
            ax.set_xlabel('State', fontsize=7, fontstyle='italic')  # X-axis label
            ax.set_ylabel('Users Count', fontsize=7, fontstyle='italic')  # Y-axis label
            ax.set_title('Users Count by Year', fontsize=10, fontstyle='italic', fontweight='bold')
            legend_properties = {'weight': 'bold', 'size': 7, 'family': 'Calibri'}
            ax.legend(title='Year', prop=legend_properties)
             
            st.pyplot(plt.gcf())  # Show the figure
            plt.clf()  # Clear the figure
        
            # Add some space between the plots
            st.write("\n")

            with st.expander("Observations & Insights"):
                 st.write(""" The plot above shows an increasing trend in the number of PhonePe users from 2018 to 2022, however an over dip in the number of users by more than 55% in 2023 compared to the previous year can be attributed to,
                      \n 1. Competition: With many players such as Google Pay, Paytm, and other fintech startups. Increased competition could lead to a shift in users away from PhonePe to other platforms.
                      \n 2. Regulatory Changes: Regulatory changes in the digital payments sector or banking industry can impact user adoption. For instance, changes in compliance requirements or transaction limits could affect user experience.
                      \n 3. Security or Privacy Concerns: Any security breaches or privacy issues could lead to a loss of trust in the platform, prompting users to switch to other services.
                      \n 4. Technical Issues: Technical problems such as frequent downtimes, bugs, or issues with transaction processing can cause users to look for alternatives.
                      \n 5. Economic or External Factors: Economic downturns, inflation, or other external factors can impact consumer spending habits and, in turn, the use of digital payment platforms.
                      \n 6. Changes in PhonePe's Offerings: If PhonePe made significant changes to its services, fees, or incentives in 2022, these changes could have affected user retention.
                      \n 7. Market Saturation: The market for digital payments may have reached a point of saturation, where user growth is slower due to a large portion of the market already being covered.
                      \n 8. Marketing and Promotion: A lack of effective marketing and promotional efforts compared to competitors can result in a decline in user growth.
                      \n 9. Negative Press or Public Perception: Any negative press coverage or incidents that impact public perception can drive users away from the platform.
                      \n 10. The North East region of India, commonly known as the Eight Sister states (comprising Arunachal Pradesh, Assam, Meghalaya, Nagaland, Mizoram, Tripura, Manipur, and Sikkim), has unique characteristics that influence digital adoption, including the use of PhonePe. The reasons behind the variation in PhonePe users in this region compared to other parts of India could be 
                      \n a) Smartphone Access
                      \n b) Internet Subscription & Penetration 
                      \n c) Bank Account Linkage
                      \n d) PhonePe's Efforts: PhonePe has been actively working on merchant digitization efforts in the North East. 58% of the total 15 lakh merchants** in the region have been digitized, making **UPI** the most popular mode of payment.
                      \nThe varied use cases include peer-to-peer transfers (P2P) and merchant payments (both online and offline).
                      \n11. In summary, while the North East region faces challenges related to internet penetration, it has made significant progress in digital acceptance. Efforts by platforms like PhonePe, combined with the region's smartphone ownership and bank account linkage, contribute to the ongoing digitization journey in the Eight Sister states.
                      """)
            st.divider()

        #     query = f"select State, District_Name, Registred_Users_count from top_user_dist where Year = {y_choice} and Quarter = {q_choice};" 
        #     xx = pd.read_sql(query,mydb)
        #     st.write(xx)
        #     pivotx = xx.pivot_table(index = "District_Name", columns= "State", values= 'Registred_Users_count')
        #     st.write(pivotx)
        #     ax = sns.heatmap(pivotx)
        #     # ax = sns.heatmap(pivotx, annot=pivotx.rank(axis='columns'), cmap=sns.cubehelix_palette(as_cmap=True))
        #     # ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='center', fontsize=7)
        #     # ax.set_yticklabels(ax.get_yticklabels(), fontsize=7)
        #     # ax.set_xlabel('State', fontsize=7, fontstyle='italic')  # X-axis label
        #     # ax.set_ylabel('District', fontsize=7, fontstyle='italic')  # Y-axis label
        #     # ax.set_title('Top User Districts', fontsize=10, fontstyle='italic', fontweight='bold')
        #     legend_properties = {'weight': 'bold', 'size': 7, 'family': 'Calibri'}
        #     ax.legend(title='No. of Users', prop=legend_properties)
             
        #     st.pyplot(plt.gcf())  # Show the figure
        #     plt.clf()  # Clear the figure
        
        #     # Add some space between the plots
        #     st.write("\n")

        #     st.divider()
        
        

        
        

        
